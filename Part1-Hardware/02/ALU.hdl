/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

// * Description from Nand2Tetris project materials. 

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0


    PARTS:

    Mux16(a=x, b=false, sel = zx, out = zxOut);      //for zx
    Not16(in=zxOut, out = notOutzx);     //Not of input x -> Bitwise Not
    Mux16(a=zxOut, b=notOutzx, sel = nx, out = nxOut);     //for nx

    Mux16(a=y, b=false, sel = zy, out = zyOut);      //for zy
    Not16(in=zyOut, out = notOutzy);     //Not of input y -> Bitwise Not
    Mux16(a=zyOut, b=notOutzy, sel = ny, out = nyOut);     //for ny

    And16(a=nxOut, b=nyOut, out = outAnd);     //for x&y
    Add16(a=nxOut, b=nyOut, out = outAdd);     //for x+y

    Mux16(a=outAnd, b=outAdd, sel = f, out = semiOut);    //for f - selection bwetween x+y and x&y

    Not16(in=semiOut, out = notSemiOut);     //for !out (Not of out)

    Mux16(a=semiOut, b=notSemiOut, sel = no, out = out);     //for final - out


    //for rest OUT -> zr, ng
    Mux16(a=semiOut, b=notSemiOut, sel = no, out[0..7] = LSB, out[8..14] = MSB, out[15] = mostMSB);     //dummy MUX

    Or8Way(in=LSB, out = or1);
    Or8Way(in[0..6]=MSB, in[7]=mostMSB, out = or2);
    Or(a=or1, b=or2, out = or1ORor2);

    Mux(a=true, b=false, sel = or1ORor2, out = zr);     //for zr
    
    Mux(a=false, b = true, sel = mostMSB, out = ng);    //for ng
}