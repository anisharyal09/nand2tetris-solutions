/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 * 
 * Description from Nand2Tetris project materials.  
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Mux16 - 1
    Mux16(a=instruction, b=aluOutM, sel=instruction[15], out=mux1Out);

    //A register
    Not(in=instruction[15], out=not15);
    And(a=instruction[15], b=instruction[5], out=isCA);
    Or(a=not15, b=isCA, out=loadA);
    ARegister(in=mux1Out, load = loadA, out=ARegOut, out[0..14]=addressM);

    // Mux16 - 2
    //If c instruction & ins[12], only then M - input, else ARegOut
    And(a=instruction[15], b=instruction[12], out=selectinM);
    Mux16(a=ARegOut, b = inM, sel=selectinM, out=mux2Out);

    //D register
    And(a=instruction[15], b=instruction[4], out =isD);
    DRegister(in=aluOutM, load = isD, out = DRegOut);

    // ALU
    ALU(x=DRegOut, y = mux2Out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOutM, out = outM, zr =zr, ng=ng);

    //writeM
    And(a=instruction[15], b=instruction[3], out =writeM);


    //PC - Implementation

    Not(in=instruction[0], out = not0);
    Not(in=instruction[1], out = not1);
    Not(in=instruction[2], out = not2);

    //Unconditional Jump condition
    And(a=instruction[0], b= instruction[1], out= and01);
    And(a=and01, b= instruction[2], out= uncJump);

    //Rest Jump Conditions Handling
    Not(in=zr, out=notZR);
    Not(in=ng, out=notNG);

    //Check if jump condition is met based on instruction bits
    And(a=notZR, b=notNG, out=positive);
    And(a=instruction[0], b=positive, out=jgt);
    And(a=instruction[1], b=zr, out=jeq);
    And(a=instruction[2], b=ng, out=jlt);

    //Combine all jump conditions
    Or(a=jgt, b=jeq, out=temp);
    Or(a=temp, b=jlt, out=jumpCondition);

    //Only jump if it's a C-instruction
    And(a=instruction[15], b=jumpCondition, out=loadPC);

    //inc - true iff loadPC is false
    Mux(a=true, b=false, sel=loadPC, out=toInc);

    PC(in=ARegOut, inc=toInc, load = loadPC, reset = reset, out[0..14]=pc);
}